events {
    worker_connections 1024;
}

http {
    upstream golang_backend {
        server service_1:8001;
    }

    upstream python_backend {
        server service_2:8002;
    }

    server {
        listen 80; # Listen on port 80
      

        # Route requests to /go to golang service
         location ~ ^/go(/.*)?$ {    
           rewrite ^/go/(.*)$ /$1 break;
            proxy_pass http://golang_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

     
        # Route requests to /py to python service
        location ~ ^/py(/.*)?$ { 
           rewrite ^/py/(.*)$ /$1 break;
            proxy_pass http://python_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

     

        # Default route - can serve a simple status page
        location / {
            return 200 'Nginx Reverse Proxy is running!\n\nAvailable endpoints:\n- /go - Golang service\n- /py - Python service\n';
            add_header Content-Type text/plain;
        }

        # Health check endpoint
        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
        }
    }
} 